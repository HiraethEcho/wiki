-
    name: '[QuickInsertV2]'
    text: "// @use-markdown\n[${linkText}](/wiki/zotero/${subNoteItem.getNoteTitle ? subNoteItem.getNoteTitle().replace(/[/\\\\?%*:|\"<> ]/g, \"-\") + \"-\":\"\"}${subNoteItem.key}) <a href=\"${link}\">zn</a>"
-
    name: '[QuickImportV2]'
    text: "${link}\n<blockquote>\n${{\n  return await Zotero.BetterNotes.api.convert.link2html(link, {noteItem, dryRun: _env.dryRun});\n}}$\n</blockquote>"
-
    name: '[QuickNoteV5]'
    text: "${{\n  let res = \"\";\n  if (annotationItem.annotationComment) {\n    res += await Zotero.BetterNotes.api.convert.md2html(\n      annotationItem.annotationComment\n    );\n  } else {\n\tres += \"No comment\";\n  }\n  return res;\n}}$\n\n// @use-markdown\n***\n${{\n\tlet res = \"\";\n  res += await Zotero.BetterNotes.api.convert.annotations2html([annotationItem], {noteItem, ignoreComment: true});\n  return res;\n}}$"
-
    name: '[ExportMDFileNameV2]'
    text: '${(noteItem.getNoteTitle ? noteItem.getNoteTitle().replace(/[/\\?%*:|"<> ]/g, "-") + "-" : "")}${noteItem.key}.md'
-
    name: '[ExportMDFileHeaderV2]'
    text: "${{\n  let header = {};\n  header.tags = noteItem.getTags().map((_t) => _t.tag);\n  header.parent = noteItem.parentItem\n    ? noteItem.parentItem.getField(\"title\")\n    : \"\";\n  header.collections = (\n    await Zotero.Collections.getCollectionsContainingItems([\n      (noteItem.parentItem || noteItem).id,\n    ])\n  ).map((c) => c.name);\n  return JSON.stringify(header);\n}}$"
-
    name: '[ExportMDFileContent]'
    text: "${{\n  let start = mdContent;\n  let rmspan = start.replace(/<\\/?span.*?>/g,'');\n  let pdflink = rmspan.replace(/(<a .*?open.*?>)“(.*?)”/g,'$2 $1(pdf)</a>');\n  let dir2zotero = pdflink.replace(/<a href.*?zhref=\"(.*?)\" ztype.*?>/g,'<a href=\"$1\">');\n  return dir2zotero;\n}}$"
